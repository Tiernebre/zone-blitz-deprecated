/*
 * This file is generated by jOOQ.
 */
package com.tiernebre.database.jooq;


import com.tiernebre.database.jooq.tables.Account;
import com.tiernebre.database.jooq.tables.League;
import com.tiernebre.database.jooq.tables.Person;
import com.tiernebre.database.jooq.tables.Player;
import com.tiernebre.database.jooq.tables.Registration;
import com.tiernebre.database.jooq.tables.Session;
import com.tiernebre.database.jooq.tables.records.AccountRecord;
import com.tiernebre.database.jooq.tables.records.LeagueRecord;
import com.tiernebre.database.jooq.tables.records.PersonRecord;
import com.tiernebre.database.jooq.tables.records.PlayerRecord;
import com.tiernebre.database.jooq.tables.records.RegistrationRecord;
import com.tiernebre.database.jooq.tables.records.SessionRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("account_pkey"), new TableField[] { Account.ACCOUNT.ID }, true);
    public static final UniqueKey<AccountRecord> UNIQUE_GOOGLE_ACCOUNT_ID = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("unique_google_account_id"), new TableField[] { Account.ACCOUNT.GOOGLE_ACCOUNT_ID }, true);
    public static final UniqueKey<AccountRecord> UNIQUE_REGISTRATION_ID = Internal.createUniqueKey(Account.ACCOUNT, DSL.name("unique_registration_id"), new TableField[] { Account.ACCOUNT.REGISTRATION_ID }, true);
    public static final UniqueKey<LeagueRecord> LEAGUE_PKEY = Internal.createUniqueKey(League.LEAGUE, DSL.name("league_pkey"), new TableField[] { League.LEAGUE.ID }, true);
    public static final UniqueKey<PersonRecord> PERSON_PKEY = Internal.createUniqueKey(Person.PERSON, DSL.name("person_pkey"), new TableField[] { Person.PERSON.ID }, true);
    public static final UniqueKey<PlayerRecord> PLAYER_PERSON_ID_KEY = Internal.createUniqueKey(Player.PLAYER, DSL.name("player_person_id_key"), new TableField[] { Player.PLAYER.PERSON_ID }, true);
    public static final UniqueKey<PlayerRecord> PLAYER_PKEY = Internal.createUniqueKey(Player.PLAYER, DSL.name("player_pkey"), new TableField[] { Player.PLAYER.ID }, true);
    public static final UniqueKey<RegistrationRecord> REGISTRATION_PKEY = Internal.createUniqueKey(Registration.REGISTRATION, DSL.name("registration_pkey"), new TableField[] { Registration.REGISTRATION.ID }, true);
    public static final UniqueKey<RegistrationRecord> REGISTRATION_USERNAME_KEY = Internal.createUniqueKey(Registration.REGISTRATION, DSL.name("registration_username_key"), new TableField[] { Registration.REGISTRATION.USERNAME }, true);
    public static final UniqueKey<SessionRecord> SESSION_PKEY = Internal.createUniqueKey(Session.SESSION, DSL.name("session_pkey"), new TableField[] { Session.SESSION.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountRecord, RegistrationRecord> ACCOUNT__ACCOUNT_REGISTRATION_ID_FKEY = Internal.createForeignKey(Account.ACCOUNT, DSL.name("account_registration_id_fkey"), new TableField[] { Account.ACCOUNT.REGISTRATION_ID }, Keys.REGISTRATION_PKEY, new TableField[] { Registration.REGISTRATION.ID }, true);
    public static final ForeignKey<LeagueRecord, AccountRecord> LEAGUE__LEAGUE_ACCOUNT_ID_FKEY = Internal.createForeignKey(League.LEAGUE, DSL.name("league_account_id_fkey"), new TableField[] { League.LEAGUE.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
    public static final ForeignKey<PlayerRecord, PersonRecord> PLAYER__PLAYER_PERSON_ID_FKEY = Internal.createForeignKey(Player.PLAYER, DSL.name("player_person_id_fkey"), new TableField[] { Player.PLAYER.PERSON_ID }, Keys.PERSON_PKEY, new TableField[] { Person.PERSON.ID }, true);
    public static final ForeignKey<SessionRecord, AccountRecord> SESSION__SESSION_ACCOUNT_ID_FKEY = Internal.createForeignKey(Session.SESSION, DSL.name("session_account_id_fkey"), new TableField[] { Session.SESSION.ACCOUNT_ID }, Keys.ACCOUNT_PKEY, new TableField[] { Account.ACCOUNT.ID }, true);
}
