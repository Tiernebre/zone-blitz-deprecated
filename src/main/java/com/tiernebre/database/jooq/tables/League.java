/*
 * This file is generated by jOOQ.
 */
package com.tiernebre.database.jooq.tables;


import com.tiernebre.database.jooq.Keys;
import com.tiernebre.database.jooq.Public;
import com.tiernebre.database.jooq.tables.Account.AccountPath;
import com.tiernebre.database.jooq.tables.Team.TeamPath;
import com.tiernebre.database.jooq.tables.records.LeagueRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class League extends TableImpl<LeagueRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.league</code>
     */
    public static final League LEAGUE = new League();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LeagueRecord> getRecordType() {
        return LeagueRecord.class;
    }

    /**
     * The column <code>public.league.id</code>.
     */
    public final TableField<LeagueRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.league.account_id</code>.
     */
    public final TableField<LeagueRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.league.name</code>.
     */
    public final TableField<LeagueRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    private League(Name alias, Table<LeagueRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private League(Name alias, Table<LeagueRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.league</code> table reference
     */
    public League(String alias) {
        this(DSL.name(alias), LEAGUE);
    }

    /**
     * Create an aliased <code>public.league</code> table reference
     */
    public League(Name alias) {
        this(alias, LEAGUE);
    }

    /**
     * Create a <code>public.league</code> table reference
     */
    public League() {
        this(DSL.name("league"), null);
    }

    public <O extends Record> League(Table<O> path, ForeignKey<O, LeagueRecord> childPath, InverseForeignKey<O, LeagueRecord> parentPath) {
        super(path, childPath, parentPath, LEAGUE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LeaguePath extends League implements Path<LeagueRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LeaguePath(Table<O> path, ForeignKey<O, LeagueRecord> childPath, InverseForeignKey<O, LeagueRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LeaguePath(Name alias, Table<LeagueRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LeaguePath as(String alias) {
            return new LeaguePath(DSL.name(alias), this);
        }

        @Override
        public LeaguePath as(Name alias) {
            return new LeaguePath(alias, this);
        }

        @Override
        public LeaguePath as(Table<?> alias) {
            return new LeaguePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LeagueRecord, Long> getIdentity() {
        return (Identity<LeagueRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LeagueRecord> getPrimaryKey() {
        return Keys.LEAGUE_PKEY;
    }

    @Override
    public List<ForeignKey<LeagueRecord, ?>> getReferences() {
        return Arrays.asList(Keys.LEAGUE__LEAGUE_ACCOUNT_ID_FKEY);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, Keys.LEAGUE__LEAGUE_ACCOUNT_ID_FKEY, null);

        return _account;
    }

    private transient TeamPath _team;

    /**
     * Get the implicit to-many join path to the <code>public.team</code> table
     */
    public TeamPath team() {
        if (_team == null)
            _team = new TeamPath(this, null, Keys.TEAM__TEAM_LEAGUE_ID_FKEY.getInverseKey());

        return _team;
    }

    @Override
    public List<Check<LeagueRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("league_name_check"), "(((char_length(name) > 0) AND (char_length(name) <= 64)))", true)
        );
    }

    @Override
    public League as(String alias) {
        return new League(DSL.name(alias), this);
    }

    @Override
    public League as(Name alias) {
        return new League(alias, this);
    }

    @Override
    public League as(Table<?> alias) {
        return new League(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(String name) {
        return new League(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(Name name) {
        return new League(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public League rename(Table<?> name) {
        return new League(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League where(Condition condition) {
        return new League(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public League where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public League where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public League where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public League where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public League whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
