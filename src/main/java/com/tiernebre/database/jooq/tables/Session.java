/*
 * This file is generated by jOOQ.
 */
package com.tiernebre.database.jooq.tables;

import com.tiernebre.database.jooq.Keys;
import com.tiernebre.database.jooq.Public;
import com.tiernebre.database.jooq.tables.records.SessionRecord;
import java.util.Collection;
import java.util.UUID;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Session extends TableImpl<SessionRecord> {

  private static final long serialVersionUID = 1L;

  /**
   * The reference instance of <code>public.session</code>
   */
  public static final Session SESSION = new Session();

  /**
   * The class holding records for this type
   */
  @Override
  public Class<SessionRecord> getRecordType() {
    return SessionRecord.class;
  }

  /**
   * The column <code>public.session.id</code>.
   */
  public final TableField<SessionRecord, UUID> ID = createField(
    DSL.name("id"),
    SQLDataType.UUID.nullable(false).defaultValue(
      DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)
    ),
    this,
    ""
  );

  /**
   * The column <code>public.session.account_id</code>.
   */
  public final TableField<SessionRecord, String> ACCOUNT_ID = createField(
    DSL.name("account_id"),
    SQLDataType.CLOB,
    this,
    ""
  );

  private Session(Name alias, Table<SessionRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private Session(
    Name alias,
    Table<SessionRecord> aliased,
    Field<?>[] parameters,
    Condition where
  ) {
    super(
      alias,
      null,
      aliased,
      parameters,
      DSL.comment(""),
      TableOptions.table(),
      where
    );
  }

  /**
   * Create an aliased <code>public.session</code> table reference
   */
  public Session(String alias) {
    this(DSL.name(alias), SESSION);
  }

  /**
   * Create an aliased <code>public.session</code> table reference
   */
  public Session(Name alias) {
    this(alias, SESSION);
  }

  /**
   * Create a <code>public.session</code> table reference
   */
  public Session() {
    this(DSL.name("session"), null);
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Public.PUBLIC;
  }

  @Override
  public UniqueKey<SessionRecord> getPrimaryKey() {
    return Keys.SESSION_PKEY;
  }

  @Override
  public Session as(String alias) {
    return new Session(DSL.name(alias), this);
  }

  @Override
  public Session as(Name alias) {
    return new Session(alias, this);
  }

  @Override
  public Session as(Table<?> alias) {
    return new Session(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public Session rename(String name) {
    return new Session(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public Session rename(Name name) {
    return new Session(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public Session rename(Table<?> name) {
    return new Session(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session where(Condition condition) {
    return new Session(
      getQualifiedName(),
      aliased() ? this : null,
      null,
      condition
    );
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Session where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Session where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Session where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public Session where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public Session whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }
}
