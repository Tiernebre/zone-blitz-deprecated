/*
 * This file is generated by jOOQ.
 */
package com.tiernebre.database.jooq.tables;


import com.tiernebre.database.jooq.Keys;
import com.tiernebre.database.jooq.Public;
import com.tiernebre.database.jooq.tables.Account.AccountPath;
import com.tiernebre.database.jooq.tables.records.RegistrationRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Registration extends TableImpl<RegistrationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.registration</code>
     */
    public static final Registration REGISTRATION = new Registration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegistrationRecord> getRecordType() {
        return RegistrationRecord.class;
    }

    /**
     * The column <code>public.registration.id</code>.
     */
    public final TableField<RegistrationRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.registration.username</code>.
     */
    public final TableField<RegistrationRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.registration.password</code>.
     */
    public final TableField<RegistrationRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.CLOB.nullable(false), this, "");

    private Registration(Name alias, Table<RegistrationRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Registration(Name alias, Table<RegistrationRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.registration</code> table reference
     */
    public Registration(String alias) {
        this(DSL.name(alias), REGISTRATION);
    }

    /**
     * Create an aliased <code>public.registration</code> table reference
     */
    public Registration(Name alias) {
        this(alias, REGISTRATION);
    }

    /**
     * Create a <code>public.registration</code> table reference
     */
    public Registration() {
        this(DSL.name("registration"), null);
    }

    public <O extends Record> Registration(Table<O> path, ForeignKey<O, RegistrationRecord> childPath, InverseForeignKey<O, RegistrationRecord> parentPath) {
        super(path, childPath, parentPath, REGISTRATION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RegistrationPath extends Registration implements Path<RegistrationRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RegistrationPath(Table<O> path, ForeignKey<O, RegistrationRecord> childPath, InverseForeignKey<O, RegistrationRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RegistrationPath(Name alias, Table<RegistrationRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RegistrationPath as(String alias) {
            return new RegistrationPath(DSL.name(alias), this);
        }

        @Override
        public RegistrationPath as(Name alias) {
            return new RegistrationPath(alias, this);
        }

        @Override
        public RegistrationPath as(Table<?> alias) {
            return new RegistrationPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RegistrationRecord, Long> getIdentity() {
        return (Identity<RegistrationRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RegistrationRecord> getPrimaryKey() {
        return Keys.REGISTRATION_PKEY;
    }

    @Override
    public List<UniqueKey<RegistrationRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.REGISTRATION_USERNAME_KEY);
    }

    private transient AccountPath _account;

    /**
     * Get the implicit to-many join path to the <code>public.account</code>
     * table
     */
    public AccountPath account() {
        if (_account == null)
            _account = new AccountPath(this, null, Keys.ACCOUNT__ACCOUNT_REGISTRATION_ID_FKEY.getInverseKey());

        return _account;
    }

    @Override
    public List<Check<RegistrationRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("username_length"), "(((char_length(username) <= 64) AND (char_length(username) > 0)))", true),
            Internal.createCheck(this, DSL.name("username_non_blank"), "(((char_length(username) <= 64) AND (char_length(username) > 0)))", true)
        );
    }

    @Override
    public Registration as(String alias) {
        return new Registration(DSL.name(alias), this);
    }

    @Override
    public Registration as(Name alias) {
        return new Registration(alias, this);
    }

    @Override
    public Registration as(Table<?> alias) {
        return new Registration(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(String name) {
        return new Registration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(Name name) {
        return new Registration(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Registration rename(Table<?> name) {
        return new Registration(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration where(Condition condition) {
        return new Registration(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Registration where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Registration where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Registration where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Registration where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Registration whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
